import time
import random
import requests
from datetime import datetime, timedelta
import pytz

BOT_TOKEN = '7782887867:AAHBKS3nGoLlnzc4jXeTLOVtmikGXdFH8KE'
CHANNEL_ID = '-1002841531910'
OWNER_ID = 756428648
OFFSET = None
AUTO_POSTING = False

CURRENCY_PAIRS = [
    'EURUSD', 'AUDCHF', 'AUDUSD', 'CADCHF', 'EURGBP', 'GBPAUD', 'GBPJPY', 'GBPUSD',
    'USDJPY', 'USDCHF', 'EURCHF', 'AUDCAD', 'NZDUSD', 'EURJPY', 'CHFJPY', 'AUDJPY',
    'CADJPY', 'EURAUD', 'EURCAD', 'USDCNH', 'USDCAD', 'USDSGD',
    'USDTRY', 'USDMYR', 'USDTHB', 'USDEGP', 'USDARS', 'USDBRL', 'USDMXN',
    'USDPKR', 'USDIDR', 'USDBDT', 'YERUSD', 'LBPUSD', 'AEDCNY',
    'SARCNY', 'QARCNY', 'NGNUSD', 'USDPHP', 'USDVND', 'UAHUSD', 'USDCOP'
]

emoji_map = {
    'AUD': 'üá¶üá∫', 'CHF': 'üá®üá≠', 'EUR': 'üá™üá∫', 'USD': 'üá∫üá∏', 'GBP': 'üá¨üáß',
    'JPY': 'üáØüáµ', 'CAD': 'üá®üá¶', 'NZD': 'üá≥üáø', 'CNH': 'üá®üá≥', 'TRY': 'üáπüá∑',
    'MYR': 'üá≤üáæ', 'THB': 'üáπüá≠', 'EGP': 'üá™üá¨', 'ARS': 'üá¶üá∑', 'BRL': 'üáßüá∑',
    'MXN': 'üá≤üáΩ', 'PKR': 'üáµüá∞', 'IDR': 'üáÆüá©', 'BDT': 'üáßüá©', 'YER': 'üáæüá™',
    'LBP': 'üá±üáß', 'AED': 'üá¶üá™', 'SAR': 'üá∏üá¶', 'QAR': 'üá∂üá¶', 'NGN': 'üá≥üá¨',
    'PHP': 'üáµüá≠', 'VND': 'üáªüá≥', 'UAH': 'üá∫üá¶', 'COP': 'üá®üá¥'
}

SIGNALS = ['BUY', 'SELL']
PHOTO_BUY = 'https://i.imgur.com/a/sNdCYu9.jpeg'
PHOTO_SELL = 'https://i.imgur.com/a/nfhSHDG.jpeg'

session_stats = {'plus': 0, 'minus': 0, 'total': 0}
weekly_stats = []

BG_TZ = pytz.timezone('Europe/Sofia')

def is_within_trading_hours():
    now = datetime.now(BG_TZ).time()
    return now >= datetime.strptime('12:00', '%H:%M').time() and now <= datetime.strptime('15:00', '%H:%M').time()

def is_end_of_session():
    now = datetime.now(BG_TZ).time()
    return now >= datetime.strptime('15:00', '%H:%M').time() and now <= datetime.strptime('15:01', '%H:%M').time()

def is_end_of_week():
    now = datetime.now(BG_TZ)
    return now.weekday() == 6 and now.time() >= datetime.strptime('15:01', '%H:%M').time()

def reset_daily_stats():
    global session_stats
    weekly_stats.append(session_stats.copy())
    session_stats = {'plus': 0, 'minus': 0, 'total': 0}

def send_photo_with_caption(chat_id, photo_url, caption):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    data = {
        'chat_id': chat_id,
        'photo': photo_url,
        'caption': caption,
        'parse_mode': 'HTML'
    }
    requests.post(url, data=data)

def generate_signal():
    pair = random.choice(CURRENCY_PAIRS)
    signal = random.choice(SIGNALS)
    base, quote = pair[:3], pair[3:]
    base_flag = emoji_map.get(base, '')
    quote_flag = emoji_map.get(quote, '')
    timeframe = random.choice(['1–º', '5–º'])
    indicators = {
        'RSI': round(random.uniform(10, 90), 5),
        'MACD': round(random.uniform(-0.01, 0.01), 5),
        'ADX': round(random.uniform(10, 50), 5),
        'Stochastic': round(random.uniform(0, 100), 5),
        'CCI': round(random.uniform(-200, 200), 5),
        'Momentum': round(random.uniform(-0.01, 0.01), 5),
        'EMA20': round(random.uniform(0.5, 1.5), 5),
        'SMA20': round(random.uniform(0.5, 1.5), 5),
    }
    price = round(random.uniform(0.5, 1.5), 5)
    advice = random.choice([
        "–ù–µ —Ç—ä—Ä–≥—É–≤–∞–π, –∫–æ–≥–∞—Ç–æ —Å–∏ —è–¥–æ—Å–∞–Ω –∏–ª–∏ –ø—Ä–µ–∫–∞–ª–µ–Ω–æ –µ–Ω—Ç—É—Å–∏–∞–∑–∏—Ä–∞–Ω.",
        "–í–∏–Ω–∞–≥–∏ –ø–æ—Å—Ç–∞–≤—è–π —Å—Ç–æ–ø –ª–æ—Å.",
        "–ù–µ —Ä–∏—Å–∫—É–≤–∞–π –ø–æ–≤–µ—á–µ –æ—Ç 2% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –µ–¥–Ω–∞ —Å–¥–µ–ª–∫–∞.",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π –Ω–æ–≤–∏–Ω–∏—Ç–µ –ø—Ä–µ–¥–∏ –¥–∞ –≤–ª–µ–∑–µ—à –≤ —Å–¥–µ–ª–∫–∞.",
        "–°–ª–µ–¥–≤–∞–π —Ç—Ä–µ–Ω–¥–∞, –∏–∑–±—è–≥–≤–∞–π —Ç—ä—Ä–≥–æ–≤–∏—è –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è."
    ])
    signal_icon = "üìà" if signal == 'BUY' else "üìâ"
    text = (
        f"{base_flag}/{quote_flag} –í–∞–ª—É—Ç–Ω–∞ –¥–≤–æ–π–∫–∞: {base}/{quote}\n\n"
        f"üìå –°–∏–≥–Ω–∞–ª: {signal} {signal_icon}\n"
        f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n"
        f"üíµ –¶–µ–Ω–∞: {price}\n\n"
        f"üßÆ –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏—Ç–µ:\n\n"
        f"üî¥ RSI: {indicators['RSI']}\n"
        f"üî¥ MACD: {indicators['MACD']}\n"
        f"üî¥ ADX: {indicators['ADX']}\n"
        f"üî¥ Stochastic: {indicators['Stochastic']}\n"
        f"üî¥ CCI: {indicators['CCI']}\n"
        f"üî¥ Momentum: {indicators['Momentum']}\n"
        f"üî¥ EMA20: {indicators['EMA20']}\n"
        f"üî¥ SMA20: {indicators['SMA20']}\n\n"
        f"üí° –°—ä–≤–µ—Ç: {advice}"
    )
    is_profitable = random.choices([True, False], weights=[70, 30])[0]
    if is_profitable:
        session_stats['plus'] += 1
    else:
        session_stats['minus'] += 1
    session_stats['total'] += 1
    return signal, text, pair  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É

def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {'chat_id': chat_id, 'text': text, 'parse_mode': 'HTML'}
    requests.post(url, data=data)

def get_updates(offset):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    params = {'timeout': 10, 'offset': offset}
    response = requests.get(url, params=params)
    return response.json()

def process_commands(updates):
    global AUTO_POSTING, OFFSET
    for update in updates.get('result', []):
        OFFSET = update['update_id'] + 1
        message = update.get('message', {})
        text = message.get('text', '')
        chat_id = message.get('chat', {}).get('id')
        user_id = message.get('from', {}).get('id')
        if user_id != OWNER_ID:
            continue
        if text == '/start':
            if AUTO_POSTING:
                send_message(chat_id, "‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—Ç–æ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ –≤–µ—á–µ –µ –∞–∫—Ç–∏–≤–Ω–æ.")
            else:
                AUTO_POSTING = True
                send_message(chat_id, "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—Ç–æ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–æ.")
        elif text == '/stop':
            AUTO_POSTING = False
            send_message(chat_id, "‚èπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—Ç–æ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ –µ —Å–ø—Ä—è–Ω–æ.")
        elif text == '/status':
            status = "‚úÖ –ê–ö–¢–ò–í–ù–û" if AUTO_POSTING else "‚ùå –ù–ï–ê–ö–¢–ò–í–ù–û"
            send_message(chat_id, f"–°—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ—Ç–æ: {status}")
        elif text == '/testpost':
            signal, signal_text, pair = generate_signal()
            send_pre_signal_warning(pair)
            time.sleep(30)
            photo_url = PHOTO_BUY if signal == 'BUY' else PHOTO_SELL
            send_photo_with_caption(CHANNEL_ID, photo_url, signal_text)
            send_message(chat_id, "‚úÖ –¢–µ—Å—Ç–æ–≤–∏—è—Ç —Å–∏–≥–Ω–∞–ª –±–µ—à–µ –∏–∑–ø—Ä–∞—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–∏ –Ω–µ–≥–æ).")


# ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
def send_pre_signal_warning(pair):
    base, quote = pair[:3], pair[3:]
    base_flag = emoji_map.get(base, '')
    quote_flag = emoji_map.get(quote, '')
    warning_text = (
        f"üîî –ü–æ–¥–≥–æ—Ç–≤–µ—Ç–µ —Å–µ –∑–∞ –≤–∞–ª—É—Ç–Ω–∞—Ç–∞ –¥–≤–æ–π–∫–∞ {base_flag}/{quote_flag} {base}/{quote}\n\n"
        f"üëÄ –°–∏–≥–Ω–∞–ª—ä—Ç —â–µ –±—ä–¥–µ —Å–ª–µ–¥ –Ω—è–∫–æ–ª–∫–æ —Å–µ–∫—É–Ω–¥–∏, –±—ä–¥–µ—Ç–µ –≥–æ—Ç–æ–≤–∏!\n\n"
        f"‚ùóÔ∏è –ü–æ–¥–≥–æ—Ç–≤–µ—Ç–µ —Å—É–º–∞ –∑–∞ –≤—Ö–æ–¥ —Å—ä–≥–ª–∞—Å–Ω–æ —Ä–∏—Å–∫ –º–µ–Ω–∏–¥–∂–º—ä–Ω—Ç–∞ ‚Äì –Ω–µ –ø–æ–≤–µ—á–µ –æ—Ç 2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤–∏."
    )
    send_message(CHANNEL_ID, warning_text)

def main():
    global OFFSET
    print("–ë–æ—Ç—ä—Ç –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω...")
    counter = 0
    while True:
        try:
            updates = get_updates(OFFSET)
            process_commands(updates)
            if AUTO_POSTING and is_within_trading_hours():
                if counter >= 5:
                    signal, signal_text, pair = generate_signal()  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É
                    send_pre_signal_warning(pair)  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û
                    time.sleep(30)  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û

                    photo_url = PHOTO_BUY if signal == 'BUY' else PHOTO_SELL
                    send_photo_with_caption(CHANNEL_ID, photo_url, signal_text)
                    counter = 0
                else:
                    counter += 1
            if is_end_of_session():
                report = (
                    f"\uD83D\uDCCA <b>–†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç —Ç—ä—Ä–≥–æ–≤—Å–∫–∞—Ç–∞ —Å–µ—Å–∏—è:</b>\n\n"
                    f"\uD83D\uDCC8 –£—Å–ø–µ—à–Ω–∏ —Å–¥–µ–ª–∫–∏: <b>{session_stats['plus']}</b>\n"
                    f"\uD83D\uDCC9 –ù–µ—É—Å–ø–µ—à–Ω–∏ —Å–¥–µ–ª–∫–∏: <b>{session_stats['minus']}</b>\n"
                    f"\uD83D\uDCCA –û–±—â–æ —Å–∏–≥–Ω–∞–ª–∏: <b>{session_stats['total']}</b>\n\n"
                    f"\uD83D\uDCAC –ó–∞–ø–æ–º–Ω–∏: –î–æ—Ä–∏ –Ω–∞–π-–¥–æ–±—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞—Ç 100% —É—Å–ø–µ—Ö!"
                )
                send_message(CHANNEL_ID, report)
                reset_daily_stats()
            if is_end_of_week():
                total_plus = sum(day['plus'] for day in weekly_stats)
                total_minus = sum(day['minus'] for day in weekly_stats)
                total_signals = sum(day['total'] for day in weekly_stats)
                weekly_report = (
                    f"\uD83D\uDCC6 <b>–°–µ–¥–º–∏—á–µ–Ω –æ—Ç—á–µ—Ç:</b>\n\n"
                    f"\uD83D\uDCCB –¢—ä—Ä–≥–æ–≤—Å–∫–∏ –¥–Ω–∏: <b>{len(weekly_stats)}</b>\n"
                    f"\uD83D\uDCC8 –£—Å–ø–µ—à–Ω–∏ —Å–¥–µ–ª–∫–∏: <b>{total_plus}</b>\n"
                    f"\uD83D\uDCC9 –ù–µ—É—Å–ø–µ—à–Ω–∏ —Å–¥–µ–ª–∫–∏: <b>{total_minus}</b>\n"
                    f"\uD83D\uDCCA –û–±—â–æ —Å–∏–≥–Ω–∞–ª–∏: <b>{total_signals}</b>\n\n"
                    f"\uD83D\uDCE2 –ê–∫–æ —Å–∏ —Å–ª–µ–¥–≤–∞–ª —Å–∏–≥–Ω–∞–ª–∏—Ç–µ ‚Äì —Å–ø–æ–¥–µ–ª–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ —Å–∏!"
                )
                send_message(CHANNEL_ID, weekly_report)
                weekly_stats.clear()
            time.sleep(1)
        except Exception as e:
            print("–ì—Ä–µ—à–∫–∞:", e)
            time.sleep(5)

if __name__ == "__main__":
    main()
